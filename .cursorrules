# Cursor Rules for ClickUp Automation Project

## Git Commit and Push Rule
When the user asks to "commit changes" or similar, always:
1. **Create a detailed commit message** that explains:
   - What changes were made
   - Why the changes were made
   - Benefits or improvements achieved
   - Any breaking changes or important notes
2. **Automatically push to remote** after committing, unless explicitly told otherwise
3. **Use conventional commit format** when appropriate (feat:, fix:, refactor:, etc.)
4. **Include context** about the scope and impact of changes

Example format:
```
type: brief description

- Detailed bullet points explaining changes
- Technical details about implementation
- Benefits and improvements
- Any important notes for future developers
```

## Deploy Rule
When the user says "deploy", always:
1. **Require version specification**: The command must include version in format "deploy X.Y.Z" (major.minor.patch)
2. **If version not provided**: 
   - Check current version in pubspec.yaml
   - Ask user for the target version
   - Inform user of current version
3. **Version validation**:
   - Verify pubspec.yaml version and VERSION in main.dart matches requested version
   - If not matching, update pubspec.yaml and VERSION in main.dart
4. **Branch validation**:
   - Ensure NOT on main branch
   - Confirm on develop branch or offshoot of develop
5. **Deployment workflow**:
   - Commit and push current changes (If there is anything to commit)
   - If on develop offshoot: merge to develop, push develop
   - Merge develop to main, push main
   - Tag main branch with version (vX.Y.Z format)
   - Return to original branch

This ensures controlled versioned deployments with proper branching strategy.

## Enum Format Rule
When creating enums, always follow the format of RelevanceUnit:

```dart
enum EnumName {
  VALUE_1,
  VALUE_2,
  VALUE_3;

  static final Map<EnumName, String> _map = {
    EnumName.VALUE_1: 'value_1',
    EnumName.VALUE_2: 'value_2',
    EnumName.VALUE_3: 'value_3',
  };

  static EnumName fromString(String value) {
    final entry = _map.entries.firstWhere(
      (entry) => entry.value == value,
      orElse: () => throw ArgumentError('Invalid enum value: $value'),
    );
    return entry.key;
  }

  String toDisplayString() {
    return name[0] + name.substring(1).toLowerCase();
  }

  @override
  String toString() => _map[this]!;
}
```

This format provides:
- Static `fromString()` method for parsing string values
- `toDisplayString()` method for user-friendly display
- `toString()` method for API/technical usage
- Consistent mapping between enum values and string representations

## ClickUp Structure Update Rule
When the user says "update the clickup structure" or similar, always:
1. **Structure Validation**:
   - Read and compare `run/prod/clickup.yaml` and `run/test/clickup.yaml`
   - Verify both files have identical structure (same keys and nested keys)
   - If structures differ, alert the user with specific differences found
2. **Code Synchronization**:
   - If structures match, analyze the YAML structure
   - Check if `app/lib/env/clickup.dart` classes need updates to match the structure
   - Update the Dart classes to reflect any new fields, nested objects, or changes
   - Ensure proper type definitions and null safety
3. **Validation Process**:
   - Compare key hierarchies between files
   - Check for missing or extra fields in either environment
   - Verify data types and nesting levels match
   - Report any structural inconsistencies before proceeding with code updates

This ensures ClickUp configuration consistency across environments and keeps Dart models synchronized.